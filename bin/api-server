#!/usr/bin/env node
require('shelljs/global');
var Promise = require("bluebird");
var fs = require('fs');
var request = require('request');
// var console = require('logge');

var jsonreader = require('../src/jsonreader');
var res_to_api = require('../src/res_to_api');
var copy_server_tpl_fils = require('../src/copy');
//console.debug = false;
//console.set_log_request(false);
var filelist = [];

REQUEST_FOLDER_NAME = "/request"
RESPONSE_FOLDER_NAME = "/response"
SERVER_FOLDER_NAME = "/server"
GENERATE_MARKDOWN_FILE_NAME = "api.md"

function log(t){
	console.log(t);
}

function parse_request(){
	var request_dir = process.cwd() + REQUEST_FOLDER_NAME;
	var api_md_file = process.cwd() + '/' + GENERATE_MARKDOWN_FILE_NAME;
	var response_dir = process.cwd() + RESPONSE_FOLDER_NAME;
	var server_dir = process.cwd() + SERVER_FOLDER_NAME;
	var server_routes_dir = process.cwd() + SERVER_FOLDER_NAME + '/routes';
	// rm("-rf",response_dir+'/*.res');
	log("request_dir = " + request_dir);
	
	if (test('-d', request_dir) == false) {
		// mkdir('-p', request_dir);
		log('request folder is empty. you need put some.req in request folder');
		return;
	};
	
	if (test('-d', server_routes_dir) == false) {
		mkdir('-p', server_routes_dir);
		
		var desc_path = server_dir + '/node_modules';
		console.log('desc_path = ' + desc_path)
		copy_server_tpl_fils(desc_path);
		log('server_routes_dir folder is empty. you need put some.req in server/routes folder');
		return;
	};
		
	_parse_with_request_dir(request_dir);	
	console.log(filelist);
	
	// filelist = ["/Users/sang/workspace/github/api-test/play/request/get.req"];
	Promise.all(filelist).map(function(req_file) {
    console.log("单一文件处理" + req_file);
		return request_processing_with_file(req_file);
	}).then(function(req_file) {
		console.log("所有文件都处理都已经完成");
		start_server();
	});
}


function request_processing_with_file(req_file){
	log("当前正在处理" + req_file);
	var obj = "";

	return jsonreader(req_file).then(function (obj) {
		obj.file_name = req_file.split('/').pop();;
		obj.file_path = req_file;
		obj.pwd = process.cwd();
		console.log(obj);
		return Promise.resolve(obj);
		// return request.task(obj, requestCompleteCallback)
	}).then(function(jsonObj){
		log("writeHandler" + jsonObj);
		return write_an_api(jsonObj);
	}).then(function(){
		log("...json read end");
	}).catch(SyntaxError, function (e) {
	    console.log("file contains invalid json");
	}).error(function (e) {
	    console.log("unable to read file, because: ", e.message);
	});
}

/**
 * 写入api数据
 */
function write_an_api(jsonObj) {
	if(jsonObj){
		log("writeHandler jsonObj exist,准备写入.res文件");
		var resName = jsonObj.file_name.replace(/.req/, '.js');
		var resPath = 'server/routes/' + resName;

		// fs.writeFileSync(resPath, JSON.stringify(jsonObj), 'utf-8', function(err){
	// 	    if(err){
	// 	        return log(err);
	// 	    }
	// 	});
	
		console.log(jsonObj)
		var api_md_file = pwd_dir + '/' + GENERATE_MARKDOWN_FILE_NAME;
		return res_to_api(jsonObj ,api_md_file ,function(md){
		
			//succ
		},function(){
			//fail
			cb_fail();
		});

		var data = {};
		return Promise.resolve(jsonObj, data);
	}else{
		log("writeHandler jsonObj nil");
		return Promise.resolve(jsonObj, data);
	}
}

function start_server(){

}


function main(){
	parse_request();
}

main();

// -- private 
function _parse_with_request_dir(path){
	console.log(path);
  var dirList = fs.readdirSync(path);
 
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isFile()){
			var req_file = path + '/' + item;
			// request_processing_with_file(req_file)
			filelist.push(req_file);
    }
  });
 
  // 子目录，暂不处理，现在是广度优先。
  dirList.forEach(function(item){
    if(fs.statSync(path + '/' + item).isDirectory()){
      walk(path + '/' + item);
    }
  });
	
	console.log(filelist)
}
